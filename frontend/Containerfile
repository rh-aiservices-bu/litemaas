# Multi-stage build with shared base
# Stage 1: Create base Node.js image with updated packages
FROM registry.access.redhat.com/ubi9/nodejs-18:1 AS nodejs-base

# Switch to root to update packages
USER root

# Update system packages and clean up
RUN dnf update -y && dnf clean all

# Set working directory
WORKDIR /app

# Switch back to default user
USER 1001

# Stage 2: Build the React application
FROM nodejs-base AS builder

# Copy package files
COPY --chown=1001:1001 package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY --chown=1001:1001 . .

# Accept build arguments for Vite environment variables
ARG VITE_API_URL=http://localhost:8080
ARG VITE_OAUTH_CLIENT_ID=litemaas-client
ARG VITE_OAUTH_REDIRECT_URL=http://localhost:8080/auth/callback
ARG VITE_APP_NAME=LiteMaaS
ARG VITE_APP_VERSION=1.0.0

# Set environment variables for build
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_OAUTH_CLIENT_ID=$VITE_OAUTH_CLIENT_ID
ENV VITE_OAUTH_REDIRECT_URL=$VITE_OAUTH_REDIRECT_URL
ENV VITE_APP_NAME=$VITE_APP_NAME
ENV VITE_APP_VERSION=$VITE_APP_VERSION

# Build the application
RUN npm run build

# Stage 3: Serve the application with nginx
FROM registry.access.redhat.com/ubi9/nginx-120:1

# Copy built files from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create nginx configuration for SPA
RUN echo 'server { \
    listen 8080; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # Handle client-side routing \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # API proxy to backend \
    location /api { \
        proxy_pass http://backend:8080; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    # Security headers \
    add_header X-Frame-Options "SAMEORIGIN" always; \
    add_header X-Content-Type-Options "nosniff" always; \
    add_header X-XSS-Protection "1; mode=block" always; \
    \
    # Cache static assets \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Expose port 8080 (nginx default for UBI)
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 